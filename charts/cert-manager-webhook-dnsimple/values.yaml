# The GroupName here is used to identify your company or business unit that
# created this webhook.
# For example, this may be "acme.mycompany.com".
# This name will need to be referenced in each Issuer's `webhook` stanza to
# inform cert-manager of where to send ChallengePayload resources in order to
# solve the DNS01 challenge.
# This group name should be **unique**, hence using your own company's domain
# here is recommended.
groupName: acme.neoskop.de
certManager:
  namespace: cert-manager
  serviceAccountName: cert-manager
# logLevel: 3
dnsimple:
  token: ""
  # existingTokenSecret: false
  # tokenSecretName:
clusterIssuer:
  email: name@example.com
  staging:
    create: false
  production:
    create: false
image:
  repository: neoskop/cert-manager-webhook-dnsimple
  tag: 0.1.0
  pullPolicy: IfNotPresent
  # pullSecret: "gcr"
nameOverride: ""
fullnameOverride: ""
service:
  type: ClusterIP
  port: 443
resources: {}
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#  cpu: 100m
#  memory: 128Mi
# requests:
#  cpu: 100m
#  memory: 128Mi

nodeSelector: {}
tolerations: []
affinity: {}

# Pod Security Context
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
securityContext: {}
# legacy securityContext parameter format: if enabled is set to true, only fsGroup and runAsUser are supported
# securityContext:
#   enabled: false
#   fsGroup: 65534
#   runAsUser: 65534
# to support additional securityContext parameters, omit the `enabled` parameter and simply specify the parameters
# you want to set, e.g.
securityContext:
  fsGroup: 65534
  runAsUser: 65534
  runAsNonRoot: true
